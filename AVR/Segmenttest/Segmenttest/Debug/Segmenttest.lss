
Segmenttest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000204  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  000002a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000867  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000745  00000000  00000000  00000bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000370  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c7  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001fb  00000000  00000000  00001ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001ce2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
  9e:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <getSW>:
	return key;
}


void my_delay(unsigned int t){
	while(t--){
  a6:	93 b1       	in	r25, 0x03	; 3
  a8:	90 95       	com	r25
  aa:	98 23       	and	r25, r24
  ac:	91 f0       	breq	.+36     	; 0xd2 <getSW+0x2c>
  ae:	48 2f       	mov	r20, r24
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	23 b1       	in	r18, 0x03	; 3
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	20 95       	com	r18
  b8:	30 95       	com	r19
  ba:	24 23       	and	r18, r20
  bc:	35 23       	and	r19, r21
  be:	23 2b       	or	r18, r19
  c0:	c1 f7       	brne	.-16     	; 0xb2 <getSW+0xc>
  c2:	e3 ec       	ldi	r30, 0xC3	; 195
  c4:	f9 e0       	ldi	r31, 0x09	; 9
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <getSW+0x20>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <getSW+0x26>
  cc:	00 00       	nop
  ce:	89 2f       	mov	r24, r25
  d0:	08 95       	ret
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	08 95       	ret

000000d6 <setnum>:
		_delay_ms(1);
	}
}

void setnum(unsigned char num){
	if (num >9){
  d6:	8a 30       	cpi	r24, 0x0A	; 10
  d8:	38 f4       	brcc	.+14     	; 0xe8 <setnum+0x12>
		Sa|Sc|Sd|Se|Sf|Sg,	//6
		Sa|Sb|Sc|Sf,	//7
		Sa|Sb|Sc|Sd|Se|Sf|Sg,	//8 
		Sa|Sb|Sc|Sd|Sf|Sg	//9
	};
	PORTD = ~font[num];
  da:	e8 2f       	mov	r30, r24
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	e0 50       	subi	r30, 0x00	; 0
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	80 81       	ld	r24, Z
  e4:	80 95       	com	r24
  e6:	8b b9       	out	0x0b, r24	; 11
  e8:	08 95       	ret

000000ea <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	4f 93       	push	r20
  fa:	5f 93       	push	r21
  fc:	6f 93       	push	r22
  fe:	7f 93       	push	r23
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
 108:	cf 93       	push	r28
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31
	static unsigned char dig = 0;	//static -> 一回しか呼ばれない
	PORTD = 0b11111111;	//全消灯
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	8b b9       	out	0x0b, r24	; 11
	if (dig == 0){
 112:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 116:	81 11       	cpse	r24, r1
 118:	16 c0       	rjmp	.+44     	; 0x146 <__vector_14+0x5c>
		PORTC = L_DIG;	//下の桁をつける
 11a:	c1 e0       	ldi	r28, 0x01	; 1
 11c:	c8 b9       	out	0x08, r28	; 8
		setnum(seg%10);
 11e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <seg>
 122:	9d ec       	ldi	r25, 0xCD	; 205
 124:	89 9f       	mul	r24, r25
 126:	91 2d       	mov	r25, r1
 128:	11 24       	eor	r1, r1
 12a:	96 95       	lsr	r25
 12c:	96 95       	lsr	r25
 12e:	96 95       	lsr	r25
 130:	99 0f       	add	r25, r25
 132:	29 2f       	mov	r18, r25
 134:	22 0f       	add	r18, r18
 136:	22 0f       	add	r18, r18
 138:	92 0f       	add	r25, r18
 13a:	89 1b       	sub	r24, r25
 13c:	0e 94 6b 00 	call	0xd6	; 0xd6 <setnum>
		dig = 1;	//更新
 140:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <__data_end>
 144:	1b c0       	rjmp	.+54     	; 0x17c <__vector_14+0x92>
		}else{
		PORTC = H_DIG;	//上の桁をつける
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	88 b9       	out	0x08, r24	; 8
		setnum((seg/10)%10);
 14a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <seg>
 14e:	9d ec       	ldi	r25, 0xCD	; 205
 150:	89 9f       	mul	r24, r25
 152:	81 2d       	mov	r24, r1
 154:	11 24       	eor	r1, r1
 156:	86 95       	lsr	r24
 158:	86 95       	lsr	r24
 15a:	86 95       	lsr	r24
 15c:	89 9f       	mul	r24, r25
 15e:	91 2d       	mov	r25, r1
 160:	11 24       	eor	r1, r1
 162:	96 95       	lsr	r25
 164:	96 95       	lsr	r25
 166:	96 95       	lsr	r25
 168:	99 0f       	add	r25, r25
 16a:	29 2f       	mov	r18, r25
 16c:	22 0f       	add	r18, r18
 16e:	22 0f       	add	r18, r18
 170:	92 0f       	add	r25, r18
 172:	89 1b       	sub	r24, r25
 174:	0e 94 6b 00 	call	0xd6	; 0xd6 <setnum>
		dig = 0;	//更新
 178:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
	}
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	cf 91       	pop	r28
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <main>:

int main(void){
    DDRD = 0b11111111;
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	8a b9       	out	0x0a, r24	; 10
	DDRC = H_DIG|L_DIG;
 1a4:	93 e0       	ldi	r25, 0x03	; 3
 1a6:	97 b9       	out	0x07, r25	; 7
	DDRB = 0b00000000;
 1a8:	14 b8       	out	0x04, r1	; 4
	PORTB = SWup | SWdwn;
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	85 b9       	out	0x05, r24	; 5
	
	TCCR0A = 0b00000010;	//CTC動作
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011;	//クロック64分周
 1b2:	95 bd       	out	0x25, r25	; 37
	OCR0A = 15;	//1kHz割り込み
 1b4:	9f e0       	ldi	r25, 0x0F	; 15
 1b6:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 1 << OCIE0A;	//タイマー0比較一致割り込み
 1b8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	
	sei();	//CPU割り込み許可
 1bc:	78 94       	sei
			}else{
				seg++;
			}
		}else if(getSW(SWdwn)){
			if (seg == 0){
				seg = 99;
 1be:	c3 e6       	ldi	r28, 0x63	; 99
	TIMSK0 = 1 << OCIE0A;	//タイマー0比較一致割り込み
	
	sei();	//CPU割り込み許可
	
    while (1){
		if (getSW(SWup)){
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	0e 94 53 00 	call	0xa6	; 0xa6 <getSW>
 1c6:	88 23       	and	r24, r24
 1c8:	59 f0       	breq	.+22     	; 0x1e0 <main+0x40>
			if (seg == 99){
 1ca:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <seg>
 1ce:	83 36       	cpi	r24, 0x63	; 99
 1d0:	19 f4       	brne	.+6      	; 0x1d8 <main+0x38>
				seg = 0;
 1d2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <seg>
 1d6:	f4 cf       	rjmp	.-24     	; 0x1c0 <main+0x20>
			}else{
				seg++;
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <seg>
 1de:	f0 cf       	rjmp	.-32     	; 0x1c0 <main+0x20>
			}
		}else if(getSW(SWdwn)){
 1e0:	84 e0       	ldi	r24, 0x04	; 4
 1e2:	0e 94 53 00 	call	0xa6	; 0xa6 <getSW>
 1e6:	88 23       	and	r24, r24
 1e8:	59 f3       	breq	.-42     	; 0x1c0 <main+0x20>
			if (seg == 0){
 1ea:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <seg>
 1ee:	81 11       	cpse	r24, r1
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <main+0x58>
				seg = 99;
 1f2:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <seg>
 1f6:	e4 cf       	rjmp	.-56     	; 0x1c0 <main+0x20>
			}else{
				seg--;
 1f8:	81 50       	subi	r24, 0x01	; 1
 1fa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <seg>
 1fe:	e0 cf       	rjmp	.-64     	; 0x1c0 <main+0x20>

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
